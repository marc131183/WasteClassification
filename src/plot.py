import matplotlib.pyplot as plt
import seaborn as sns

sns.set_theme()
import numpy as np
import pandas as pd


def lossAccuracyPlot():
    # fmt: off
    train_loss = [1.177250885493653, 0.7055802160636518, 0.5061423087089229, 0.41146264496264207, 0.31274904565638956, 0.275274072086755, 0.21916082044640334, 0.11520167855218753, 0.11698629184197659, 0.09325886706886334, 0.0805298418531191, 0.07794083814941774, 0.0718253042700939, 0.0749590593863315, 0.07289111545590161, 0.06282061195744577, 0.06723239382724536, 0.06644995264475066, 0.07477724866965446, 0.06750418386145235, 0.05991244970500735, 0.0648668376927691, 0.06899203805262648, 0.0808493355511487, 0.06361263317868787, 0.06696812791964969, 0.06137874579609566, 0.06350432086750833, 0.05788046609672519, 0.06239008450321371, 0.07092420040267076, 0.05977617580658179]
    test_loss = [1.6415901044607162, 3.9456371439620854, 1.7471147991167382, 1.0889105692990124, 0.950049408480525, 3.516777223257348, 1.4241251730849036, 1.3307176851158729, 1.209128784770146, 1.432690581952571, 1.3041656877456698, 1.028014871990541, 1.2511019704942592, 1.2374934919588267, 1.3151252749329432, 1.0309769558091648, 0.8863603633646854, 1.1334525081124156, 0.9328808407811447, 1.2650632009701803, 1.0767214503819122, 1.1221427267142572, 0.916193432466127, 0.996570034370292, 1.3856973614618182, 0.9338448822358623, 1.063957337633241, 0.9745795513812918, 1.2735274057295174, 1.0772623906363734, 1.1792454060250894, 0.9155915996991097]
    val_loss = [2.2214952041772573, 2.770778649763481, 2.9604474950481103, 5.847460921954465, 8.984369921523172, 5.961883973279917, 8.013059453384296, 6.588730776632154, 5.420980405968589, 5.029745725361076, 5.941679371369852, 4.820978807436453, 4.776906567650872, 4.283336110211708, 4.182640146564793, 4.584249945105733, 4.0782449454874605, 4.287207057347169, 4.024255287808341, 4.233129201708613, 4.3853634895907865, 4.940894541708198, 4.05442795399073, 4.411295614532523, 5.202710242690267, 3.5260358807202934, 4.372690893105559, 4.604218347451171, 3.5478623783266223, 4.827052258559175, 3.7194522522591256]

    train_acc = [0.5509,0.7459,0.8291,0.8644,0.8972,0.9132,0.9305,0.9681,0.9669,0.9717,0.9784,0.9811,0.9813,0.9802,0.9795,0.9813,0.9825,0.9825,0.9809,0.9811,0.9858,0.9822,0.9816,0.9764,0.9820,0.9831,0.9845,0.9849,0.9852,0.9843,0.9818,0.9840]
    test_acc = [0.4680,0.4480,0.5980,0.6260,0.6760,0.6300,0.7280,0.7420,0.7120,0.7240,0.7300,0.7400,0.7340,0.7560,0.7420,0.7620,0.7640,0.7520,0.7220,0.7120,0.7220,0.7540,0.7720,0.7620,0.7300,0.7580,0.7580,0.7620,0.7540,0.7380,0.7540,0.7520]
    val_acc = [0.4392,0.4561,0.3750,0.2331,0.2128,0.2838,0.2297,0.2095,0.1689,0.2264,0.2095,0.2162,0.2162,0.2162,0.2669,0.2230,0.2297,0.2466,0.2669,0.1993,0.2331,0.2196,0.2128,0.2162,0.2128,0.2534,0.2095,0.2196,0.2230,0.2297,0.2196]
    # fmt: on

    fig, ax = plt.subplots(2, figsize=(7, 10))

    ax[0].plot(train_loss, label="Train")
    ax[0].plot(test_loss, label="Validation")
    ax[0].plot(val_loss, label="On-Site")
    ax[0].axvline(x=len(train_loss) - 10, color="red", label="Early Stopping")
    ax[0].set_yticks(np.arange(0, 11, 1))
    ax[0].legend()
    ax[0].set_ylabel("Loss")

    ax[1].plot(train_acc, label="Train")
    ax[1].plot(test_acc, label="Validation")
    ax[1].plot(val_acc, label="On-Site")
    ax[1].axvline(x=len(train_acc) - 10, color="red", label="Early Stopping")
    ax[1].legend()
    ax[1].set_xlabel("Epoch")
    ax[1].set_ylabel("Accuracy")
    plt.show()


def accuracyComparisonPlot():
    # fmt: off
    alexnet_accuracy_traditional = [0.5204918032786885, 0.6101010101010101, 0.6310483870967742, 0.6544715447154471, 0.784, 0.7626774847870182, 0.725609756097561, 0.6673387096774194, 0.6707070707070707, 0.75]
    alexnet_accuracy_other = [0.5266393442622951, 0.6282828282828283, 0.6048387096774194, 0.6646341463414634, 0.75, 0.7809330628803245, 0.7479674796747967, 0.6229838709677419, 0.6121212121212121, 0.71]

    resnet18_accuracy_traditional = [0.8155737704918032, 0.8626262626262626, 0.9435483870967742, 0.8922764227642277, 0.96, 0.8762677484787018, 0.9390243902439024, 0.8528225806451613, 0.795959595959596, 0.848]
    resnet18_accuracy_other = [0.5942622950819673, 0.7414141414141414, 0.8931451612903226, 0.8130081300813008, 0.962, 0.8032454361054767, 0.9247967479674797, 0.7741935483870968, 0.6747474747474748, 0.706]

    resnet50_accuracy_traditional = [0.8258196721311475, 0.8828282828282829, 0.9112903225806451, 0.8963414634146342, 0.956, 0.8823529411764706, 0.9776422764227642, 0.8165322580645161, 0.9191919191919192, 0.85]
    resnet50_accuracy_other = [0.6577868852459017, 0.896969696969697, 0.8528225806451613, 0.8577235772357723, 0.93, 0.821501014198783, 0.9065040650406504, 0.8104838709677419, 0.8525252525252526, 0.798]

    vgg_accuracy_traditional = [0.694672131147541, 0.8525252525252526, 0.8487903225806451, 0.806910569105691, 0.918, 0.8640973630831643, 0.8841463414634146, 0.7399193548387096, 0.7515151515151515, 0.838]
    vgg_accuracy_other = [0.6352459016393442, 0.8363636363636363, 0.8044354838709677, 0.8109756097560976, 0.908, 0.8397565922920892, 0.8841463414634146, 0.7459677419354839, 0.7313131313131314, 0.81]
    # fmt: on
    ticks = ["AlexNet", "ResNet18", "ResNet50", "VGG"]

    traditional_accuracies = [
        alexnet_accuracy_traditional,
        resnet18_accuracy_traditional,
        resnet50_accuracy_traditional,
        vgg_accuracy_traditional,
    ]
    other_accuracies = [
        alexnet_accuracy_other,
        resnet18_accuracy_other,
        resnet50_accuracy_other,
        vgg_accuracy_other,
    ]

    def set_box_color(bp, color):
        plt.setp(bp["boxes"], color=color)
        plt.setp(bp["whiskers"], color=color)
        plt.setp(bp["caps"], color=color)
        plt.setp(bp["medians"], color=color)

    fig = plt.figure()

    bpl = plt.boxplot(
        traditional_accuracies,
        positions=np.array(range(len(traditional_accuracies))) * 2.0 - 0.4,
        sym="",
        widths=0.6,
    )
    bpr = plt.boxplot(
        other_accuracies,
        positions=np.array(range(len(other_accuracies))) * 2.0 + 0.4,
        sym="",
        widths=0.6,
    )
    set_box_color(bpl, "#D7191C")  # colors are from http://colorbrewer2.org/
    set_box_color(bpr, "#2C7BB6")

    # draw temporary red and blue lines and use them to create a legend
    plt.plot([], c="#D7191C", label="Traditional Approach")
    plt.plot([], c="#2C7BB6", label="Our Approach")
    plt.legend(loc="lower right")

    plt.xticks(range(0, len(ticks) * 2, 2), ticks)
    plt.yticks(np.arange(0.5, 1.05, 0.05))
    plt.xlim(-1.2, len(ticks) * 2 - 0.8)
    plt.ylim(0.5, 1)
    plt.ylabel("Accuracy")
    plt.xlabel("Model Architecture")
    plt.gca().yaxis.grid(True, linestyle="--")
    plt.tight_layout()
    plt.show()


def HeatMapPlot():
    heatmap = np.array(
        [
            [497, 15, 78, 123, 189],
            [24, 804, 14, 76, 111],
            [17, 27, 944, 27, 14],
            [102, 95, 153, 610, 77],
            [38, 37, 28, 39, 808],
        ]
    )
    classes = ["7042", "7051", "7055", "7133", "others"]
    heatmap = (
        np.round(
            heatmap
            / np.repeat(np.sum(heatmap, axis=1)[np.newaxis, :], axis=0, repeats=5).T,
            5,
        )
        * 100
    )
    df_cm = pd.DataFrame(
        heatmap, index=[i for i in classes], columns=[i for i in classes]
    )
    plt.figure(figsize=(12, 7))
    ax = sns.heatmap(df_cm, annot=True, fmt="g", cmap=sns.color_palette("Blues", 10))
    for t in ax.texts:
        t.set_text(t.get_text() + "%")
    plt.xlabel("predicted")
    plt.ylabel("truth")
    plt.show()


if __name__ == "__main__":
    lossAccuracyPlot()
